    # def search_yt(self, item):
    #     with YoutubeDL(self.YDL_OPTIONS) as ydl:
    #         try: 
    #             info = ydl.extract_info("ytsearch:%s" % item, download=False)['entries'][0]
    #         except Exception: 
    #             return False

    #     return {'source': info['formats'][0]['url'], 'title': info['title']}

    # def play_next(self, server):
    #     if len(self.music_queue[server]) > 0:
    #         self.is_playing = True

    #         #get the first url
    #         m_url = self.music_queue[server][0][0]['source']

    #         #remove the first element as you are currently playing it
    #         self.music_queue[server].pop(0)

    #         self.vc[server].play(discord.FFmpegPCMAudio(m_url, **self.FFMPEG_OPTIONS), after=lambda e: self.play_next(server))
    #     else:
    #         self.is_playing[server] = False

    # # infinite loop checking 
    # async def play_music(self, server):
    #     if len(self.music_queue[server]) > 0:
    #         self.is_playing[server] = True

    #         m_url = self.music_queue[server][0][0]['source']
            
    #         #try to connect to voice channel if you are not already connected

    #         if self.vc[server] == "" or not self.vc[server].is_connected() or self.vc[server] == None:
    #             self.vc[server] = await self.music_queue[server][0][1].connect()
    #         else:
    #             await self.vc[server].move_to(self.music_queue[server][0][1])
            
    #         print(self.music_queue[server])
    #         #remove the first element as you are currently playing it
    #         self.music_queue[server].pop(0)

    #         self.vc[server].play(discord.FFmpegPCMAudio(m_url, **self.FFMPEG_OPTIONS), after=lambda e: self.play_next(server))
    #     else:
    #         self.is_playing[server] = False

    # @commands.command(name="play", help="Plays a selected song from youtube")
    # async def p(self, ctx, *args):
    #     query = " ".join(args)
        
    #     voice_channel = ctx.author.voice.channel
    #     server = ctx.guild.id
    #     if voice_channel is None:
    #         #you need to be connected so that the bot knows where to go
    #         await ctx.send("Connect to a voice channel!")
    #     else:
    #         song = self.search_yt(query)
    #         if type(song) == type(True):
    #             await ctx.send("Could not download the song. Incorrect format try another keyword. This could be due to playlist or a livestream format.")
    #         else:
    #             await ctx.send("Song added to the queue")
    #             self.music_queue[server] = [song, voice_channel]
                
    #             if self.is_playing[server] == False:
    #                 await self.play_music(server)

    # @commands.command(name="queue", help="Displays the current songs in queue")
    # async def q(self, ctx):
    #     retval = ""
    #     for i in range(0, len(self.music_queue)):
    #         retval += self.music_queue[i][0]['title'] + "\n"

    #     print(retval)
    #     if retval != "":
    #         await ctx.send(retval)
    #     else:
    #         await ctx.send("No music in queue")

    # @commands.command(name="skip", help="Skips the current song being played")
    # async def skip(self, ctx):
    #     if self.vc != "" and self.vc:
    #         self.vc.stop()
    #         #try to play next in the queue if it exists
    #         await self.play_music()

# ========================================

#========================================
    # def search_yt(self, item):
    #     with YoutubeDL(self.YDL_OPTIONS) as ydl:
    #         try: 
    #             info = ydl.extract_info("ytsearch:%s" % item, download=False)['entries'][0]
    #         except Exception: 
    #             return False

    #     return {'source': info['formats'][0]['url'], 'title': info['title']}

    # def play_next(self, server):
    #     if len(self.music_queue[server]) > 0:
    #         self.is_playing[server] = True

    #         #get the first url
    #         m_url = self.music_queue[server][0][0]['source']

    #         #remove the first element as you are currently playing it
    #         self.music_queue[server].pop(0)

    #         self.vc[server].play(discord.FFmpegPCMAudio(m_url, **self.FFMPEG_OPTIONS), after=lambda e: self.play_next(server))
    #     else:
    #         self.is_playing[server] = False

    # # infinite loop checking 
    # async def play_music(self, server):
    #     if len(self.music_queue[server]) > 0:
    #         self.is_playing[server] = True

    #         m_url = self.music_queue[server][0][0]['source']
            
    #         #try to connect to voice channel if you are not already connected

    #         if self.vc[server] == "" or not self.vc[server].is_connected() or self.vc[server] == None:
    #             self.vc[server] = await self.music_queue[server][0][1].connect()
    #         else:
    #             await self.vc[server].move_to(self.music_queue[server][0][1])
            
    #         print(self.music_queue[server])
    #         #remove the first element as you are currently playing it
    #         self.music_queue[server].pop(0)

    #         self.vc[server].play(discord.FFmpegPCMAudio(m_url, **self.FFMPEG_OPTIONS), after=lambda e: self.play_next(server))
    #     else:
    #         self.is_playing[server] = False

    # @commands.command(name="play", help="Plays a selected song from youtube")
    # async def p(self, ctx, *args):
    #     query = " ".join(args)
        
    #     voice_channel = ctx.author.voice.channel
    #     server = ctx.guild.id
    #     if self.vc[server] is None:
    #         print("HELLO")
    #         return 
    #     if voice_channel is None:
    #         #you need to be connected so that the bot knows where to go
    #         await ctx.send("Connect to a voice channel!")
    #     else:
    #         song = self.search_yt(query)
    #         if type(song) == type(True):
    #             await ctx.send("Could not download the song. Incorrect format try another keyword. This could be due to playlist or a livestream format.")
    #         else:
    #             await ctx.send("Song added to the queue")
    #             self.music_queue[server].append([song, voice_channel])
                
    #             if self.is_playing[server] == False:
    #                 await self.play_music(server)

    # @commands.command(name="queue", help="Displays the current songs in queue")
    # async def q(self, ctx):
    #     retval = ""
    #     server = ctx.guild.id
    #     for i in range(0, len(self.music_queue[server])):
    #         retval += self.music_queue[server][i][0]['title'] + "\n"

    #     print(retval)
    #     if retval != "":
    #         await ctx.send(retval)
    #     else:
    #         await ctx.send("No music in queue")

    # @commands.command(name="skip", help="Skips the current song being played")
    # async def skip(self, ctx):
    #     server = ctx.guild.id
    #     if self.vc[server] != "" and self.vc[server]:
    #         self.vc[server].stop()
    #         #try to play next in the queue if it exists
    #         await self.play_music(server)


